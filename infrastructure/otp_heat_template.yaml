heat_template_version: 2018-08-31

description: >
  Creates network for backend: otp_internal_net (not done)
  Adds security group for backend (port 8080)
  Adds server for backend
  Adds security group for database (PORT 3306)
  Adds server for database
  CONNECT backend and database servers to network

# -------------------------------------------------------------------------------------------------------#
# ----------------------------------------- Parameters --------------------------------------------------#
# -------------------------------------------------------------------------------------------------------#
parameters:
  key_name:
    type: string
    label: Key name backend
    description: Key name for database server and backend server

  web_key:
    type: string
    label: Key name webserver
    description: Key name for webserver

# ------------------------------------------ Webserver Params ------------------------------------------- #
  webserver_image:
    type: string
    label: Webserver image ID
    description: The image ID to use for webserver
    default: db1bc18e-81e3-477e-9067-eecaa459ec33 # Ubuntu Server 22.04 LTS (Jammy Jellyfish) amd64

  webserver_instance_type:
    type: string
    label: Webserver Instance type
    description: Type of instance (flavor) to be used for webserver
    default: m1.small # Default is 4G ram, 40 GB disk, 4 VCPU

  webserver_server_name:
    type: string
    label: webserver name
    description: Name of the webserver 
    default: webserver_instance

# ------------------------------------------ Backend Server Params ----------------------..-------------- #
  backend_server_image:
    type: string
    label: OTP backend image ID
    description: The image ID to use for backend server
    default: db1bc18e-81e3-477e-9067-eecaa459ec33 # Ubuntu Server 22.04 LTS (Jammy Jellyfish) amd64
  backend_instance_type:
    type: string
    label: Backend Instance type
    description: Type of instance (flavor) to be used for backend server
    default: m1.small # Default is 4G ram, 40 GB disk, 4 VCPU
  backend_server_name:
    type: string
    label: Backend server name
    description: Name of the backend server
    default: otp_backend_instance

# ------------------------------------------ DB Server Params ------------------------------------------- #
  db_server_image:
    type: string
    label: OTP DB image ID
    description: The image ID to use for DB server
    default: db1bc18e-81e3-477e-9067-eecaa459ec33 # Ubuntu Server 22.04 LTS (Jammy Jellyfish) amd64
  db_instance_type:
    type: string
    label: DB Instance type
    description: Type of instance (flavor) to be used for DB server
    default: m1.small # Default is 4G ram, 40 GB disk, 4 VCPU
  db_server_name:
    type: string
    label: DB server name
    description: The name of the database server
    default: otp_db_instance

# ------------------------------------------ Backend Network Params ------------------------------------- #
  private_net:
    type: string
    description: >
      ID or name of backend network for DB and backend server for which floating IP addresses will be allocated
    default: ntnu-internal  # Default is NTNU internal
  otp_net_name:
    type: string
    label: OTP Network name
    description: The name of our internal network
    default: otp_network
  otp_net_cidr:
    type: string
    description: OTP network address (CIDR)
    default: 192.168.102.0/24
  otp_net_gateway:
    type: string
    description: OTP network address
    default: 192.168.102.1
  otp_net_pool_start:
    type: string
    description: Start of private network IP address allocation pool
    default: 192.168.102.200
  otp_net_pool_end:
    type: string
    description: End of private network IP address allocation pool
    default: 192.168.102.250

# ------------------------------------------ Webserver Network Params ----------------------------------- #
  external_net_id:
    type: string
    description: >
      ID or name of backend network for DB and backend server for which floating IP addresses will be allocated
    default: ntnu-global  # Default is NTNU global
  webserver_net_name:
    type: string
    label: Webserver Network name
    description: Name of the webserver network
    default: webserver
  webserver_net_cidr:
    type: string
    description: Webserver network address (CIDR)
    default: 192.168.103.0/24
  webserver_net_gateway:
    type: string
    description: Webserver network address
    default: 192.168.103.1
  webserver_net_pool_start:
    type: string
    description: Start of webserver network IP address allocation pool
    default: 192.168.103.200
  webserver_net_pool_end:
    type: string
    description: End of webserver network IP address allocation pool
    default: 192.168.103.250

  webserver_internal_net_cidr:
    type: string
    description: Webserver network address (CIDR)
    default: 192.168.104.0/24
  webserver_internal_net_gateway:
    type: string
    description: Webserver network address
    default: 192.168.104.1
  webserver_internal_net_pool_start:
    type: string
    description: Start of webserver network IP address allocation pool
    default: 192.168.104.200
  webserver_internal_net_pool_end:
    type: string
    description: End of webserver network IP address allocation pool
    default: 192.168.104.250




# -------------------------------------------------------------------------------------------------------#
# ----------------------------------------- Resources ---------------------------------------------------#
# -------------------------------------------------------------------------------------------------------#
resources:
  # Internal network for OTP
  otp_network:
    type: OS::Neutron::Net
    properties:
      name: { get_param: otp_net_name }

# ---------------------------------------------------------------------------------------------------------- #
# ------------------------------------------ Webserver Network --------------------------------------------- #
# ---------------------------------------------------------------------------------------------------------- #
  webserver_network:
    type: OS::Neutron::Net
    properties:
      name: { get_param: webserver_net_name }

  # Subnet for connecting to NTNU-global
  webserver_subnet_external:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: webserver_network }
      cidr: { get_param: webserver_net_cidr }
      gateway_ip: { get_param: webserver_net_gateway }
      allocation_pools:
        - start: { get_param: webserver_net_pool_start }
          end: { get_param: webserver_net_pool_end }

  # Subnet for connecting to NTNU-internal
  webserver_subnet_internal:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: webserver_network }
      cidr: { get_param: webserver_internal_net_cidr }
      gateway_ip: { get_param: webserver_internal_net_gateway }
      allocation_pools:
        - start: { get_param: webserver_internal_net_pool_start }
          end: { get_param: webserver_internal_net_pool_end }
  
  # Router to NTNU-global
  webserver_router_external:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: external_net_id }

  # interface to NTNU-global
  webserver_router_interface_external:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: webserver_router_external }
      subnet_id: { get_resource: webserver_subnet_external }

  # Router to ntnu-internal
  webserver_router_internal:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: private_net }

  # Interface to NTNU-internal
  webserver_router_interface_internal:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: webserver_router_internal }
      subnet_id: { get_resource: webserver_subnet_internal }



# -------------------------------------------------------------------------------------------------------- #
# ------------------------------------------ Backend Network --------------------------------------------- #
# -------------------------------------------------------------------------------------------------------- #

  # Subnet used for connecting to ntnu-internal
  otp_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: otp_network }
      cidr: { get_param: otp_net_cidr }
      gateway_ip: { get_param: otp_net_gateway }
      allocation_pools:
        - start: { get_param: otp_net_pool_start }
          end: { get_param: otp_net_pool_end }

  # Router we want to connect with NTNU-internal as gateway
  backend_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: private_net }

  backend_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: backend_router }
      subnet_id: { get_resource: otp_subnet }


# ------------------------------------------------------------------------------------------------------- #
# ------------------------------------------ Backend Instance --------------------------------------------- #
# ------------------------------------------------------------------------------------------------------- #
  otp_backend_server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: otp_network }
      fixed_ips:
        - subnet_id: { get_resource: otp_subnet }
      security_groups:
        - default
        - linux # SSH ACCESS
        - backend_server # Allows incomming traffick at 8080

  otp_backend_instance:
    type: OS::Nova::Server
    properties:
      name: { get_param: backend_server_name }
      key_name: { get_param: key_name }
      image: { get_param: backend_server_image }
      flavor: { get_param: backend_instance_type }
      networks:
        - port: { get_resource: otp_backend_server_port }

# -------------------------------------------------------------------------------------------------- #
# ------------------------------------------ DB Instance --------------------------------------------- #
# -------------------------------------------------------------------------------------------------- #
# DB PORTS with security groups enabling SSH and 3306 (DB)
  otp_db_server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: otp_network }
      fixed_ips:
        - subnet_id: { get_resource: otp_subnet }
      security_groups:
        - default
        - linux # SSH ACCESS
        - database_server # DB ACCESS

  otp_db_instance:
    type: OS::Nova::Server
    properties:
      name: { get_param: db_server_name }
      key_name: { get_param: key_name }
      image: { get_param: db_server_image }
      flavor: { get_param: db_instance_type }
      networks:
        - port: { get_resource: otp_db_server_port }

  otp_db_server_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: private_net }
      port_id: { get_resource: otp_db_server_port }

# ---------------------------------------------------------------------------------------------------------- #
# ------------------------------------------- Webserver Instance --------------------------------------------- #
# ---------------------------------------------------------------------------------------------------------- #
  webserver_instance:
    type: OS::Nova::Server
    properties:
      name: { get_param: webserver_server_name }
      image: { get_param: webserver_image }
      flavor: { get_param: webserver_instance_type }
      key_name: { get_param: web_key }
      networks:
        - port: { get_resource: webserver_port_external }

  webserver_port_external:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: webserver_network }
      fixed_ips:
        - subnet_id: { get_resource: webserver_subnet_external }
      security_groups:
        - default
        - linux_internal # SSH ACCESS FROM internal network

  webserver_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_net_id }
      port_id: { get_resource: webserver_port_external }

  